#include "imgui/imgui.h"
#include "imgui/imgui_impl_glfw.h"
#include "imgui/imgui_impl_opengl3.h"

#include <GL/glew.h>
#include <GLFW/glfw3.h>

#include <iostream>

#include "Renderer.h"

#include "VertexArray.h"
#include "VertexBufferLayout.h"
#include "VertexBuffer.h"
#include "IndexBuffer.h"
#include "Shader.h"
#include "Texture.h"
#include "glm/glm.hpp"
#include "glm/gtc/matrix_transform.hpp"

int main(void)
{
    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    /* Here I specify the version of OpenGL that I want to use.
     * This is done by changing the context of the window:
     * Major version to 3, minor to 2, setting profile to core (prevents use of deprecated functions)
     * and enabling forward compatibility. */
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    // Core does not provide a default vao at index 0. Compat does. This is why I need to explicitly declare a vao.
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE);

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(960, 540, "Hello World", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    glfwSwapInterval(1);

    if (glewInit() != GLEW_OK)
        std::cout<< "Error!" << std::endl;

    std::cout<< glGetString(GL_VERSION) << std::endl;

    float positions[] = {
            -50.0f,  -50.0f,   0.0f, 0.0f,     // 0
             50.0f,  -50.0f,   1.0f, 0.0f,     // 1
             50.0f,   50.0f,   1.0f, 1.0f,     // 2
            -50.0f,   50.0f,   0.0f, 1.0f      // 3
    };

    unsigned int indices[] = {
            0, 1, 2,
            2, 3, 0
    };

    /* Enabling blender for textures
     *  These could probably be abstracted into the Texture class
     *  How it works is simple: Format of color is RGBAa where a is alpha -- opacity
     *   Blending function uses simple math to compute how colors blend due to transparency.
     *   In this case we use the simple eq: dest = 1 - src
     *   e.g: R_dest = (R_dest * a_dest) + (R_src * (a_src - a_dest))
     *        G_dest = (G_dest * a_dest) + (G_src * (a_src - a_dest))
     *        B_dest = (B_dest * a_dest) + (B_src * (a_src - a_dest))*/
    GLCall(glEnable(GL_BLEND));
    GLCall(glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA));

    /* Initializing Vertex Array and Vertex Buffer) */
    VertexArray va;
    VertexBuffer vb(positions, 4 * 4 * sizeof(float));
    VertexBufferLayout layout;

    /* position
     * Attrib 0 in the Vertex Array va (see AddBuffer method in VertexArray.cpp) */
    layout.Push<float>(2);
    /* texture coordinates
     * Attrib 1 in the Vertex Array va (see AddBuffer method in VertexArray.cpp) */
    layout.Push<float>(2);
    /* The method call below goes to show that one buffer can contain multiple attributes. */
    va.AddBuffer(vb, layout);

    /* Initializing index buffer */
    IndexBuffer ib(indices, 6);

    glm::mat4 proj = glm::ortho(0.0f, 960.0f, 0.0f, 540.0f, -1.0f, 1.0f);
    /* Translating everything 100 units down has the illusion of moving the camera up 100 units */
    glm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(0, 0 , 0));
    glm::vec3 translationA(200, 200, 0);
    glm::vec3 translationB(400, 200, 0);

    /* Initializing shaders and binding shader ("using program")*/
    Shader shader("res/shaders/Basic.shader");
    shader.Bind();

    /* Uniforms. key: do this after creating and binding shaders */
    //shader.SetUniform4f("u_Color", 0.5f, 0.3f, 0.8f, 1.0f);   //Commented out after started using textures.

    Texture texture("res/textures/ChernoLogo.png");
    texture.Bind();
    shader.SetUniform1i("u_Texture", 0);

    /* Unbinding everything to rebind in while loop. Not sure why. But I think to show that
     *  there is no need to bind vertex buffer after va has been linked to it. */
    va.Unbind();
    vb.Unbind();
    ib.Unbind();
    shader.Unbind();

    Renderer renderer;

    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGui_ImplGlfw_InitForOpenGL(window, true );
    //ImGui_ImplOpenGL3_Init((char*)glGetString(GL_NUM_SHADING_LANGUAGE_VERSIONS)); For some reason this returned version 130
    ImGui_ImplOpenGL3_Init("#version 150"); // had to hardcode version 150 since it is first version that supports core profile
    ImGui::StyleColorsDark();

    bool show_demo_window = true;
    bool show_another_window = false;
    ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);

    float r = 0.5f;
    float increment = 0.05f;
    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window))
    {
        /*Legacy OpenGL -- drawing a triangle
         * very easy (concise) to do, but very limited functionality - basically presets "ON" and "OFF".
        glBegin(GL_TRIANGLES);
        glVertex2f(-0.5f, -0.5f);
        glVertex2f(0.0f, 0.5f);
        glVertex2f(0.5f, -0.5f);
        glEnd();
        */

        /* We use glDrawArrays when we are drawing directly from vertices
         * 1st param is mode: Triangles
         * 2nd param is offset (where to start from) -- we start from first vertex
         * 3rd param is how many vertices to draw -- we draw 3 here (for a triangle). */
        //glDrawArrays(GL_TRIANGLES, 0, 3);

        /* Otherwise, when using an index buffer, we use glDrawElements */

        renderer.Clear();

        /* This seems to be a ImGui specific frame starter*/
        ImGui_ImplOpenGL3_NewFrame();
        ImGui_ImplGlfw_NewFrame();
        ImGui::NewFrame();

        //shader.SetUniform4f("u_Color", r, 0.2f, 0.8f, 1.0f);

        {
            glm::mat4 model = glm::translate(glm::mat4(1.0f), translationA);
            /* Notice the order. Right to left. The actual progression of transformations is model -> view -> projection. */
            glm::mat4 mvp = proj * view * model;
            shader.Bind();
            shader.SetUniformMat4f("u_MVP", mvp);

            renderer.Draw(va, ib, shader);
        }

        {
            glm::mat4 model = glm::translate(glm::mat4(1.0f), translationB);
            glm::mat4 mvp = proj * view * model;
            shader.Bind();
            shader.SetUniformMat4f("u_MVP", mvp);

            renderer.Draw(va, ib, shader);
        }

        if (r > 1.0f)
            increment = -0.05f;
        else if (r < 0.0f)
            increment = 0.05f;

        r += increment;

        {
            ImGui::SliderFloat3("Translation A", &translationA.x, 0.0f, 960.0f);
            ImGui::SliderFloat3("Translation B", &translationB.x, 0.0f, 960.0f);
            ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
        }

        ImGui::Render();
        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());

        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }

    ImGui_ImplOpenGL3_Shutdown();
    ImGui_ImplGlfw_Shutdown();
    ImGui::DestroyContext();

    glfwTerminate();
    return 0;
}